for (nr in id){
num = formatC(nr, width = 3, flag = "0") #creates a 3-digit string representing an integer
path <- paste(directory, paste(num, "csv", sep = "."), sep = "/") #D is the file name string
# x <- read.csv(path)
#data <- rbind(data,x)
# if the merged dataset doesn't exist, create it
if (!exists("data")){
data <- read.csv(path, header=TRUE, sep="\t")
}
# if the merged dataset does exist, append to it
if (exists("data")){
temp_dataset <-read.csv(path, header=TRUE, sep="\t")
data<-rbind(data, temp_dataset)
rm(temp_dataset)
}
}
data
#result <- mean(data[[pollutant]], na.rm = TRUE)
#    result
}
pollutantmean("/Users/iLad/Dropbox (Personal)/R/specdata","nitrate",1)
pollutantmean <- function (directory, pollutant, id) {
skip <- if (pollutant == "nitrate") "sulfate" else "nitrate"
for (nr in id){
num = formatC(nr, width = 3, flag = "0") #creates a 3-digit string representing an integer
path <- paste(directory, paste(num, "csv", sep = "."), sep = "/") #D is the file name string
# x <- read.csv(path)
#data <- rbind(data,x)
# if the merged dataset doesn't exist, create it
if (!exists("data")){
data <- read.csv(path, header=TRUE, sep="\t")
}
# if the merged dataset does exist, append to it
if (exists("data")){
temp_dataset <-read.csv(path, header=TRUE, sep="\t")
data<-rbind(data, temp_dataset)
rm(temp_dataset)
}
}
result <- mean(data[[pollutant]], na.rm = TRUE)
result
}
pollutantmean("/Users/iLad/Dropbox (Personal)/R/specdata","nitrate",1)
pollutantmean <- function (directory, pollutant, id) {
skip <- if (pollutant == "nitrate") "sulfate" else "nitrate"
for (nr in id){
num = formatC(nr, width = 3, flag = "0") #creates a 3-digit string representing an integer
path <- paste(directory, paste(num, "csv", sep = "."), sep = "/") #D is the file name string
# x <- read.csv(path)
#data <- rbind(data,x)
# if the merged dataset doesn't exist, create it
if (!exists("data")){
data <- read.csv(path, header=TRUE, sep="\t")
}
# if the merged dataset does exist, append to it
if (exists("data")){
temp_dataset <-read.csv(path, header=FALSE, sep="\t")
data<-rbind(data, temp_dataset)
rm(temp_dataset)
}
}
result <- mean(data[[pollutant]], na.rm = TRUE)
result
}
pollutantmean("/Users/iLad/Dropbox (Personal)/R/specdata","nitrate",1)
temp_dataset <-read.csv(path, header=FALSE)
pollutantmean <- function (directory, pollutant, id) {
skip <- if (pollutant == "nitrate") "sulfate" else "nitrate"
for (nr in id){
num = formatC(nr, width = 3, flag = "0") #creates a 3-digit string representing an integer
path <- paste(directory, paste(num, "csv", sep = "."), sep = "/") #D is the file name string
# x <- read.csv(path)
#data <- rbind(data,x)
# if the merged dataset doesn't exist, create it
if (!exists("data")){
data <- read.csv(path, header=TRUE)
}
# if the merged dataset does exist, append to it
if (exists("data")){
temp_dataset <-read.csv(path, header=FALSE)
data<-rbind(data, temp_dataset)
rm(temp_dataset)
}
}
result <- mean(data[[pollutant]], na.rm = TRUE)
result
}
temp_dataset <-read.csv(path, header=FALSE)
pollutantmean("/Users/iLad/Dropbox (Personal)/R/specdata","nitrate",1)
pollutantmean <- function (directory, pollutant, id) {
skip <- if (pollutant == "nitrate") "sulfate" else "nitrate"
for (nr in id){
num = formatC(nr, width = 3, flag = "0") #creates a 3-digit string representing an integer
path <- paste(directory, paste(num, "csv", sep = "."), sep = "/") #D is the file name string
# x <- read.csv(path)
#data <- rbind(data,x)
# if the merged dataset doesn't exist, create it
if (!exists("data")){
data <- read.csv(path)
}
# if the merged dataset does exist, append to it
if (exists("data")){
temp_data <-read.csv(path)
data<-rbind(data, temp_data)
}
}
data
#    result <- mean(data[[pollutant]], na.rm = TRUE)
# result
}
pollutantmean("/Users/iLad/Dropbox (Personal)/R/specdata","nitrate",1)
pollutantmean <- function (directory, pollutant, id) {
for (nr in id){
num = formatC(nr, width = 3, flag = "0") #creates a 3-digit string representing an integer
path <- paste(directory, paste(num, "csv", sep = "."), sep = "/") #D is the file name string
# x <- read.csv(path)
#data <- rbind(data,x)
# if the merged dataset doesn't exist, create it
if (!exists("data")){
data <- read.csv(path)
}
# if the merged dataset does exist, append to it
if (exists("data")){
temp_data <-read.csv(path)
data<-rbind(data, temp_data)
}
}
data
#    result <- mean(data[[pollutant]], na.rm = TRUE)
# result
}
pollutantmean("/Users/iLad/Dropbox (Personal)/R/specdata","nitrate",1)
pollutantmean("/Users/iLad/Dropbox (Personal)/R/specdata","nitrate",1:2)
pollutantmean <- function (directory, pollutant, id) {
for (nr in id){
num = formatC(nr, width = 3, flag = "0") #creates a 3-digit string representing an integer
path <- paste(directory, paste(num, "csv", sep = "."), sep = "/") #D is the file name string
# x <- read.csv(path)
#data <- rbind(data,x)
# if the merged dataset doesn't exist, create it
if (!exists("data")){
data <- read.csv(path)
}
else {
temp_data <-read.csv(path)
data <- rbind(data, temp_data)
}
}
data
#    result <- mean(data[[pollutant]], na.rm = TRUE)
# result
}
pollutantmean("/Users/iLad/Dropbox (Personal)/R/specdata","nitrate",1:2)
pollutantmean <- function (directory, pollutant, id) {
for (nr in id){
num = formatC(nr, width = 3, flag = "0") #creates a 3-digit string representing an integer
path <- paste(directory, paste(num, "csv", sep = "."), sep = "/") #D is the file name string
# x <- read.csv(path)
#data <- rbind(data,x)
# if the merged dataset doesn't exist, create it
if (!exists("data")){
data <- read.csv(path)
}
else {
temp_data <-read.csv(path)
data <- merge(data, temp_data)
}
}
data
#    result <- mean(data[[pollutant]], na.rm = TRUE)
# result
}
pollutantmean("/Users/iLad/Dropbox (Personal)/R/specdata","nitrate",1:2)
pollutantmean <- function (directory, pollutant, id) {
for (nr in id){
num = formatC(nr, width = 3, flag = "0") #creates a 3-digit string representing an integer
path <- paste(directory, paste(num, "csv", sep = "."), sep = "/") #D is the file name string
# x <- read.csv(path)
#data <- rbind(data,x)
# if the merged dataset doesn't exist, create it
if (!exists("data")){
data <- read.csv(path)
}
else {
temp_data <-read.csv(path)
data <- rbind(data, temp_data)
}
}
data
#    result <- mean(data[[pollutant]], na.rm = TRUE)
# result
}
pollutantmean("/Users/iLad/Dropbox (Personal)/R/specdata","nitrate",1:2)
library(sqldf)
library(quantmode)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
sampleTimes
getwd()
setwd("~/Dropbox (Personal)/R/RepRes/")
activity <- read.csv("activity.csv")
activity <- read.csv("ass1/activity.csv")
activity
head(activity)
avgstepsperinterval <- ddply(activity,~interval,summarise,avg=avg(steps))
library(plyr)
avgstepsperinterval <- ddply(activity,~interval,summarise,avg=avg(steps))
avg?
?avergate
?average
??average
avgstepsperinterval <- ddply(activity,~interval,summarise,avg=mean(steps))
plot(avgstepsperinterval)
plot(avgstepsperinterval,type="l")
View(avgstepsperinterval)
avgstepsperinterval <- ddply(activity,~interval,summarise,avg=mean(steps),na.exclude=TRUE)
View(avgstepsperinterval)
avgstepsperinterval <- ddply(activity,~interval,summarise,avg=mean(steps),na.omit=TRUE)
View(avgstepsperinterval)
avgstepsperinterval <- ddply(activity,~interval,summarise,avg=mean(steps),na.rm=TRUE)
View(avgstepsperinterval)
View(avgstepsperinterval)
remove(avgstepsperinterval)
avgstepsperinterval <- ddply(activity,~interval,summarise,avg=mean(steps),na.rm=TRUE)
View(avgstepsperinterval)
remove(avgstepsperinterval)
avgstepsperinterval <- aggregate(activity["steps"],activity["interval"],FUN=mean, na.rm=TRUE)
View(avgstepsperinterval)
plot(avgstepsperinterval)
plot(avgstepsperinterval,type="l")
getwd()
setwd("~/Dropbox (Personal)/R/RepRes/ass1//RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
View(activity)
stepsperday <- aggregate(activity["steps"],activity["date"],FUN=sum, na.rm=TRUE)
View(stepsperday)
hist(stepsperday)
View(stepsperday)
daynr <- c(1:60)
daynr
daynr <- c(1:61)
daynr
stepsperday.daynr <- daynr
View(stepsperday)
stepsperday$daynr<- daynr
View(stepsperday)
hist(stepsperday)
hist(stepsperday$daynr,stepsperday$steps)
stepsperday <- aggregate(activity["steps"],activity["date"],FUN=sum)
View(stepsperday)
hist(stepsperday$steps)
mean(stepsperday$steps,na.omit=TRUE)
mean(stepsperday$steps,na.rm=TRUE)
median(stepsperday$steps,na.rm=TRUE)
View(avgstepsperinterval)
avgstepsperinterval <- aggregate(activity["steps"],activity["interval"],FUN=mean, na.rm=TRUE)
View(avgstepsperinterval)
plot(avgstepsperinterval,type="l")
avgstepsperinterval[which(max(avgstepsperinterval$steps),]
a <- avgstepsperinterval[which(max(avgstepsperinterval$steps),]
which(max(avgstepsperinterval$steps)
which(max(avgstepsperinterval$steps),
which(max(avgstepsperinterval$steps))
which(max(avgstepsperinterval))
which.max(avgstepsperinterval)
which.max(avgstepsperinterval$steps)
avgstepsperinterval[which.max(avgstepsperinterval$steps),]
avgstepsperinterval$interval[which.max(avgstepsperinterval$steps),]
avgstepsperinterval[which.max(avgstepsperinterval$steps),"interval"]
View(activity)
avgstepsperinterval[which(avgstepsperinterval$steps==NA),]
avgstepsperinterval[which(avgstepsperinterval$steps=='NA'),]
avgstepsperinterval[which(avgstepsperinterval$steps=="NA"),]
which(avgstepsperinterval$steps=="NA")
activity[is.na(activity$steps),]
nas <- activity[is.na(activity$steps),1:10]
nas <- activity[is.na(activity$steps)]
activity[is.na(activity$steps),]
empties <- activity[is.na(activity$steps),]
empties <- empties[1:10,]
View(empties)
repl <- function (steps,interval){}
head(avgstepsperinterval)
lapply(empties,if(is.na(empties$steps){empties$steps <- avgstepsperinterval[where(avgstepsperinterval$interval==empties$interval)]}))
lapply(empties,if(is.na(empties$steps){empties$steps <- avgstepsperinterval[where(avgstepsperinterval$interval==empties$interval)]}))
lapply(empties,if(is.na(empties$steps) empties$steps <- avgstepsperinterval[where(avgstepsperinterval$interval==empties$interval)]))
?lapply
lapply(empties,if(is.na(empties$steps) empties$steps <- avgstepsperinterval[where(avgstepsperinterval$interval==empties$interval),]))
x <- "835"
avgstepsperinterval[where(avgstepsperinterval$interval==x),]
avgstepsperinterval[where(avgstepsperinterval$interval=="835"),]
head(avgstepsperinterval)
class(avgstepsperinterval$interval)
x<-835
avgstepsperinterval[where(avgstepsperinterval$interval==x),]
avgstepsperinterval[where(avgstepsperinterval$interval==835),]
where(avgstepsperinterval$interval==835)
avgstepsperinterval[avgstepsperinterval$interval==x]
empties
lapply(empties$steps,empties$steps <- avgstepsperinterval[which(avgstepsperinterval$interval),avgstepsperinterval$steps])
lapply(empties$steps,empties$steps <- avgstepsperinterval[which(avgstepsperinterval$interval),"steps"])
lapply(empties$steps,empties$steps <- avgstepsperinterval[which(avgstepsperinterval$interval==empties$interval),"steps"])
lapply(empties$steps,empties$steps <- avgstepsperinterval[which(avgstepsperinterval$interval==empties$interval),"steps"])
empti
empties
head(activity)
empties <- activity[is.na(activity$steps),]
empties <- empties[1:10]
empties <- empties[1:10,]
View(empties)
lapply(empties$steps,empties$steps <- avgstepsperinterval[which(avgstepsperinterval$interval==empties$interval),"steps"])
View(empties)
head(avgstepsperinterval)
activity2 <- activity
lapply(activity2$steps,if(is.na(activity2$steps)) activity2$steps <- avgstepsperinterval[which(avgstepsperinterval$interval==activity2$interval),"steps"])
View(activity)
View(activity2)
View(activity)
empties <- activity[is.na(activity$steps),]
empties <- empties[1:10,]
empties
if(is.na(empties$steps)){empties$steps <- avgstepsperinterval[which(avgstepsperinterval$interval==empties$interval),"steps"]}
lapply(empties,if(is.na(empties$steps)){empties$steps <- avgstepsperinterval[which(avgstepsperinterval$interval==empties$interval),"steps"]})
View(empties)
empties<-activity
lapply(empties,if(is.na(empties$steps)){empties$steps <- avgstepsperinterval[which(avgstepsperinterval$interval==empties$interval),"steps"]})
View(empties)
empties<-activity
lapply(empties,if(is.na(empties$steps)) empties$steps <- avgstepsperinterval[which(avgstepsperinterval$interval==empties$interval),"steps"])
?for
?for()
for (i in 1:nrows(empties)) {
if (empties[i,"steps"==NA]) empties[i,"steps"] <- 99
}
for (i in 1:nrow(empties)) {
if (empties[i,"steps"==NA]) empties[i,"steps"] <- 99
}
View(empties)
for (i in 1:nrow(empties)) {
if (is.na(empties[i,"steps"])) empties[i,"steps"] <- 99
}
View(empties)
empties<-activity
for (i in 1:nrow(empties)) {
if (is.na(empties[i,"steps"])) empties[i,"steps"] <- avgstepsperinterval[which(avgstepsperinterval$interval==empties[i,"interval","steps"])]
}
View(empties)
for (i in 1:nrow(empties)) {
if (is.na(empties[i,"steps"])) empties[i,"steps"] <- 99
}
View(empties)
x <- 45
avgstepsperinterval[which(avgstepsperinterval$interval==x),"steps"]
for (i in 1:nrow(empties)) {
if (is.na(empties[i,"steps"])) empties[i,"steps"] <- avgstepsperinterval[which(avgstepsperinterval$interval==empties[i,"interval"]),"steps"]
}
View(empties)
empties<-activity
for (i in 1:nrow(empties)) {
if (is.na(empties[i,"steps"])) empties[i,"steps"] <- avgstepsperinterval[which(avgstepsperinterval$interval==empties[i,"interval"]),"steps"]
}
View(empties)
empties<-activity
lapply(empties$steps,if (is.na(empties[i,"steps"])) empties[i,"steps"] <- avgstepsperinterval[which(avgstepsperinterval$interval==empties[i,"interval"]),"steps"])
View(empties)
lapply(empties$steps,if (is.na(empties$steps) empties$steps <- avgstepsperinterval[which(avgstepsperinterval$interval==empties$interval),"steps"])
lapply(empties$steps,if (is.na(empties$steps)) empties$steps <- avgstepsperinterval[which(avgstepsperinterval$interval==empties$interval),"steps"])
View(empties)
?weekdays
head(activity)
class(activity$date)
dates <- head(activity$date)
dates
as.date(dates)
as.Date(dates)
class(dates[1])
as.Date(dates[1])
dates <- as.Date(dates)
class(dates[1])
dates[1]
dates <- head(activity[1:10])
dates <- head(activity,1:10)
dates <- head(activity)
dates
dates$date <- as.Date(dates$date)
class(dates$date)
activity$date <- as.Date(activity$date)
class(activity$date)
dates
dates$weekday <- weekday(dates$date)
dates$weekday <- weekdays(dates$date)
View(dates)
dates
weekdays(Sys.Date)
weekdays(Sys.Date())
weekdays(Sys.Date()-1)
dates$weekday <- if(weekdays(dates$date)=="Saturday" || weekdays(dates$date)=="Sunday") "Weekend" else "Weekday"
View(dates)
activity$weekday <- if(weekdays(dates$date)=="Saturday" || weekdays(dates$date)=="Sunday") "Weekend" else "Weekday"
View(activity)
class(activity$weekday)
activity$weekday <- as.factor(activity$weekday)
class(activity$weekday)
library(lattice)
xyplot(interval ~ steps | weekday, data=activity)
class(activity$weekday)
activity <- transform(activity, weekday=factor(weekday))
xyplot(interval ~ steps | weekday, data=activity)
xyplot(interval ~ steps | weekday, data=activity, layout = c(1,2))
factor(activity$weekday)
hist(activity$weekday)
findUnique(activity$weekday)
findUnique(activity$weekday,inherits=FALSE)
str(act)
str(activity)
activity$weekday <- if(weekdays(dates$date)=="Saturday" || weekdays(dates$date)=="Sunday") {"Weekend"} else "Weekday"
str(activity)
activity <- transform(activity, weekday=factor(weekday))
str(activity)
activity2$weekday <- weekdays(activity2$date)
transform(activity2,date=as.Date(date))
activity2$weekday <- weekdays(activity2$date)
class(activity2$date)
activity2$date <- as.Date(activity2$date)
activity2$weekday <- weekdays(activity2$date)
str(activity2)
transform(activity2,weekday=factor(weekday))
str(activity2)
activity2$weekday <- as.factor(activity2$weekday)
str(activity2)
summary(activity2$weekday)
activity2$weekend <- if(activity2$weekday=="Sunday" || activity2$weekday=="Saturday") "weekend" else "weekday"
activity2$weekend <- as.factor(activity2$weekend)
summary(activity2$weekend)
activity2$weekend <- if(activity2$weekday=="Sunday" || activity2$weekday=="Saturday") {"weekend"} else {"weekday"}
activity2$weekend <- as.factor(activity2$weekend)
summary(activity2$weekend)
if(activity2$weekday=="Sunday" || activity2$weekday=="Saturday") {activity2$weekend <- "weekend"} else {activity2$weekend <- "weekday"}
activity2$weekend <- as.factor(activity2$weekend)
summary(activity2$weekend)
activity2$weekend <- if(activity2$weekday=="Sunday" | activity2$weekday=="Saturday") {"weekend"} else {"weekday"}
class(activity$weekday)
View(activity2)
activity2$weekday <- as.character(activity2$weekday)
activity2$weekend <- if(activity2$weekday=="Sunday" | activity2$weekday=="Saturday") {"weekend"} else {"weekday"}
activity2$weekend <- if(activity2$weekday=="Sunday" || activity2$weekday=="Saturday") {"weekend"} else {"weekday"}
summary(activity2$weekend)
summary(activity2$weekday)
activity2$weekend <- as.factor(activity2$weekend)
summary(activity2$weekday)
summary(activity2$weekend])
summary(activity2$weekend)
class(activity2$weekday)
View(activity2)
class(activity2$weekend)
summary(activity2$weekend)
summary(activity2$weekday)
activity2$weekday <-  as.factor(activity2$weekday)
activity2$weekend <- if(activity2$weekday=="Sunday" || activity2$weekday=="Saturday") {"weekend"} else {"weekday"}
summary(activity2$weekday)
summary(activity2$weekend)
activity2$weekend <- as.factor(activity2$weekend)
summary(activity2$weekend)
head(activity2)
activity2$weekday[2]
activity2$weekday[1:3]
activity2[1,"weekday"]
activity2[1,"weekday"]=="Monday"
activity2[1,"weekday"]!="Monday"
?ifelse
ifelse(activity2$weekday=="Sunday" || activity2$weekday=="Saturday",activity2$weekend="weekend",activity2$weekend="weekday")
ifelse(activity2$weekday=="Sunday" || activity2$weekday=="Saturday",activity2$weekend="weekend",activity2$weekend="weekday")
activity2$weekend <- ifelse(activity2$weekday=="Sunday" || activity2$weekday=="Saturday","weekend","weekday")
View(activity2)
summary(activity2$weekend)
activity2$weekend <- as.factor(activity2$weekend)
summary(activity2$weekend)
which(activity2$weekday=="Sunday")
activity2[16111,]
sund<-activity2[16111,]
sund
class(sund$weekday)
sund$weekday=="Sunday"
sund$weekend <- ifelse(sund$weekday=="Sunday","Weekend","Weekday")
sund
summary(sund$weekend)
as.factor(sund$weekend)
summary(sund$weekend)
sund$weekend<-as.factor(sund$weekend)
summary(sund$weekend)
activity2$weekend <- ifelse(activity2$weekday=="Sunday","weekend",ifelse(activity2$weekday=="Saturday","weekend","weekday"))
activity2$weekend <- as.factor(activity2$weekend)
summary(activity2$weekend)
xyplot(interval ~ steps | weekday, data=activity, layout = c(1,2))
xyplot(interval ~ steps | weekdend, data=activity2, layout = c(1,2))
xyplot(interval ~ steps | weekend, data=activity2, layout = c(1,2))
View(activity)
library(lattice)
activity$weekday <- ifelse(weekdays(activity$date)=="Sunday","weekend",ifelse(weekdays(activity$date)=="Saturday","weekend","weekday"))
activity$weekday <- as.factor(activity$weekday)
xyplot(interval ~ steps | weekday, data=activity, layout = c(1,2))
?xyplot
xyplot(interval ~ steps | weekday, data=activity, layout = c(1,2),type="l")
xyplot(steps ~ interval | weekday, data=activity, layout = c(1,2),type="l")
View(avgstepsperinterval)
avgstepsperintervalweekday <- aggregate(activity["steps"],activity["interval","weekday"],FUN=mean, na.rm=TRUE)
avgstepsperintervalweekday <- aggregate(activity["steps"],c(activity["interval"],activity["weekday"]),FUN=mean, na.rm=TRUE)
View(avgstepsperintervalweekday)
xyplot(steps ~ interval | weekday, data=avgstepsperintervalweekday, layout = c(1,2),type="l")
